<?php

namespace Application\Migrations;

use Doctrine\DBAL\Migrations\AbstractMigration;
use Doctrine\DBAL\Schema\Schema;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
class Version20150930134700 extends AbstractMigration {

    /**
     * @param Schema $schema
     */
    public function up(Schema $schema) {
        // this up() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql", "Migration can only be executed safely on \"mysql\".");
        $this->addSql("SET @postId := '17';");
        $this->addSql("SET @previousPostId := '16';");
        $this->addSql("SET @thisPostLinkId := '19';");
        $this->addSql("SET @postDate := '2015-09-30 23:15:00';");

        $this->addSql("UPDATE `posts` SET `show`='1', `created`=@postDate WHERE (`post_id`=@postId);");
        $this->addSql("UPDATE `post_contents` SET
                `description`='<p>\r\n    Al igual que el Product Backlog y el proyecto completo cuenta con un gráfico Release Burndown o Sprints Burndown existe otro similar para cada Sprint llamado <span style=\"font-weight:bold\">Sprint Burndown Chart</span>. Nótese que el nombre de éste último es singular mientras que el release burndown chart puede también ser llamado sprints burndown chart, es por ello que yo prefiero el nombre Release Burndown Chart para evitar ambigüedades.\r\n</p>\r\n<p>\r\n        El <span style=\"font-weight:bold\">Sprint Burndown Chart</span> muestra en el eje vertical los puntos de historia...\r\n</p>',
                `content`='<p>\r\n    <span style=\"font-size: 60px\">A</span>l igual que el <a href=\"[[ROUTE:scrum-framework-nine-]]\" class=\"post-content-link\">Product Backlog</a> y el proyecto completo cuenta con un gráfico <a href=\"[[ROUTE:scrum-framework-eleven-]]\" class=\"post-content-link\">Release Burndown o Sprints Burndown</a> existe otro similar para cada Sprint llamado <span style=\"font-weight:bold\">Sprint Burndown Chart</span>. Nótese que el nombre de éste último es singular mientras que el release burndown chart puede también ser llamado sprints burndown chart, es por ello que yo prefiero el nombre Release Burndown Chart para evitar ambigüedades.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        El <span style=\"font-weight:bold\">Sprint Burndown Chart</span> muestra en el eje vertical los puntos de historia u horas de tarea seleccionados para el Sprint y en el eje horizontal los días transcurridos del Sprint.\r\n    </div>\r\n</div>\r\n<p>\r\n    Además de mostrar si el Sprint avanza según lo esperado, el gráfico <span style=\"font-weight:bold\">muestra la proyección del Sprint</span> y qué día terminará si todo sigue como hasta hoy, proyección que se actualiza cada día.\r\n</p>\r\n<h2>\r\n    Incremento de trabajo\r\n</h2>\r\n<p>\r\n    Scrum incluye un último artefacto de manera oficial, el <span style=\"font-weight:bold\">incremento de trabajo</span>.\r\n</p>\r\n<p>\r\n    El incremento de trabajo <span style=\"font-weight:bold\">está formado por todos los ítems completados durante un Sprint que cumplen la definición de completado</span>, es decir, todos aquellos elementos que, al final del Sprint, estuvieron listos para ser desplegados en un entorno de producción y utilizados por el usuario final.\r\n</p>\r\n<p>\r\n    En términos prácticos podríamos decir que <span style=\"font-weight:bold\">el Sprint Backlog representa una predicción de lo que se puede hacer</span> en un Sprint mientras que <span style=\"font-weight:bold\">el incremento representa lo que finalmente se hizo</span>, es decir, el incremento se refiera a un hecho empírico.\r\n</p>\r\n<div class=\"key_points_text_box\">\r\n    <div class=\"title_box\">\r\n        <div class=\"generic_icon_container\"></div>\r\n        <div class=\"generic_title_container\">Key Points</div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El Sprint Burndown Chart muestra en el eje vertical los puntos de historia y en el eje horizontal los días transcurridos del Sprint.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Representa el avance del Sprint y su proyección, proyección que se actualiza cada día.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El incremento de trabajo está formado por todos los ítems completados durante un Sprint que cumplen la definición de completado.\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"links-container\">\r\n    <div class=\"left-side-link-container\">\r\n        <a href=\"[[ROUTE:scrum-framework-twelve-]]\" class=\"post-content-link\">< Artefactos de Scrum. Sprint Backlog</a>\r\n    </div\r\n    ><!--<div class=\"right-side-link-container\">\r\n        <a href=\"[[ROU__TE:scrum-framework-fouteen-]]\" class=\"post-content-link\">Artefactos de Scrum. Sprint Taskboard ></a>\r\n    </div>-->\r\n</div>\r\n<br>',
                `image`='uploads/posts/150930_sprint_burndown_chart/sprint_burndown_chart.jpg',
                `image_alt`='Artefactos de Scrum. Gráfico Sprint Burndown',
                `image_origin`='',
                `meta_title`='Becoming An Agile Architect - Artefactos de Scrum. Gráfico Sprint Burndown',
                `meta_description`='Quinto post sobre los artefactos de Scrum en el que se explica el valor del gráfico Sprint Burndown',
                `meta_keywords`='agile lean scrum kanban tdd extreme programming architect arquitectura clean code programacion coaching continuous integration integración continua alejandro barba scrum artifacts product backlog',
                `created`=@postDate,
                `modified`=@postDate
                WHERE (`post_content_id`=@postId);");
        $this->addSql("UPDATE `post_contents` SET
                `content`='<p>\r\n    <span style=\"font-size: 60px\">A</span>l principio de cada Sprint, durante el <a href=\"[[ROUTE:scrum-framework-four-]]\" class=\"post-content-link\">evento de planificación o Sprint Planning</a>, el <a href=\"[[ROUTE:scrum-framework-two-]]\" class=\"post-content-link\">Equipo Scrum</a> al completo se reúne para generar el Sprint Backlog.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        El Sprint Backlog está constituído por los elementos del Product Backlog seleccionados para realizar durante el Sprint, un plan para desarrollarlos y un objetivo de Sprint.\r\n    </div>\r\n</div>\r\n<p>\r\n    El Equipo selecciona ítems de entre aquellos de mayor prioridad del Backlog hasta alcanzar un compromiso sobre cuántos ítems podrán ser completados durante el Sprint. <span style=\"font-weight:bold\">El Equipo de Desarrollo acuerda con el Product Owner qué ítems se seleccionan</span>, pues éste querrá incluir cuántos más mejor pero el <span style=\"font-weight:bold\">Equipo de Desarrollo</span> deberá basarse en la <span style=\"font-weight:bold\">velocidad alcanzada durante los últimos Sprints para determinar cuántos ítems puede comprometerse</span> a completar.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        <span style=\"font-weight:bold\">La estimación de cuantos elementos</span> del Product Backlog pueden ser elegidos puede hacerse, una vez más, <span style=\"font-weight:bold\">en base a puntos de historia o a horas</span>.\r\n    </div>\r\n</div>\r\n<p>\r\n    Desde mi experiencia y perspectiva recomiendo <span style=\"font-weight:bold\">los puntos de historia pues miden complejidad, incertidumbre, esfuerzo y productividad</span>. Este tipo de medida tiene un cierto grado de anticipación de imprevistos (téngase en cuenta la incertidumbre) mientras que las estimaciones en horas se basan más en la idea de que todo salga como hemos pensado, incluso los imprevistos, para los cuales provisionamos una bolsa de horas concreta.\r\n</p>\r\n<p>\r\n    Si estimamos cuántos ítems seleccionar en puntos de historia podemos elegirlos del Product Backlog rápidamente y pasar de inmediato a generar el plan de trabajo, mientras que si nos basamos en horas debemos ir generando el plan a medida que estimamos cuántas horas dedicaremos a cada tarea, por lo que no sabremos cuántas historias de usuario podemos elegir hasta haber terminado toda la planificación.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        En el apartado de Sprint Planning comentamos cómo <span style=\"font-weight:bold\">cada Sprint debe contar con un objetivo que dé coherencia al trabajo realizado durante el mismo</span>. Dicho objetivo servirá como referencia a la hora de seleccionar elementos del Product Backlog para generar el Sprint Backlog.\r\n    </div>\r\n</div>\r\n<p>\r\n    Además de seleccionar los elementos del Product Backlog el <span style=\"font-weight:bold\">Equipo de Desarrollo elabora un plan</span> para llevarlos a cabo. Dicho plan consiste en analizar uno a uno cada elemento seleccionado y dividirlo en tareas técnicas de forma que cada componente necesario para completar una historia de usuario pueda ser llevado a cabo por un desarrollador, favoreciendo así el trabajo en paralelo y la generación de subtareas más fácilmente abordables y de incertidumbre acotada.\r\n</p>\r\n<p>\r\n    Las <span style=\"font-weight:bold\">historias de usuario</span> se refieren al Equipo Scrum al completo y al cliente, es decir, <span style=\"font-weight:bold\">deben ser concebidas para facilitar la comprensión y la comunicación entre perfiles heterogéneos</span>. Por otro lado las tareas técnicas, o simplemente tareas, son cosa del Equipo de Desarrollo. Ellos suelen referirse siempre a ellas hasta el punto de asimilar las unas con las otras.\r\n</p>\r\n<p>\r\n    Una vez finalizado el análisis y la generación de tareas técnicas el equipo puede reordenarlas ignorando la prioridad dada a las historias de usuario, localizando dependencias entre tareas y colocando éstas asegurándose que las tareas dependientes se abordan siempre después de las que generan la dependencia. <span style=\"font-weight:bold\">El Equipo también puede asignar tareas a miembros concretos del Equipo de Desarrollo para optimizar el proceso</span>, aunque se <span style=\"font-weight:bold\">debe ser cuidadoso y evitar la generación de islas de conocimiento</span> asignando siempre a la misma persona todas las tareas similares.\r\n</p>\r\n<p>\r\n    Una vez empezado el Sprint, y a medida que el Equipo aprende más sobre el trabajo necesario para desarrollar las tareas, puede decidir añadir tareas técnicas al Sprint Backlog o refinar las existentes si lo considera necesario así como replantear su orden.\r\n</p>\r\n<div class=\"key_points_text_box\">\r\n    <div class=\"title_box\">\r\n        <div class=\"generic_icon_container\"></div>\r\n        <div class=\"generic_title_container\">Key Points</div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El Equipo Scrum al completo se encarga de generar el Sprint Backlog durante la reunión Sprint Planning.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Lo forman los elementos del Product Backlog seleccionados para realizar durante el Sprint, un plan para desarrollarlos y un objetivo de Sprint.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El Equipo de Desarrollo acuerda con el Product Owner qué ítems se seleccionan pero es el Equipo de Desarrollo quien determina cuántos ítems puede comprometerse a completar.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                La estimación de cuantos elementos pueden ser elegidos puede hacerse en base a puntos de historia o a horas aunque se recomienda utilizar los puntos de historia.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Los puntos de historia miden complejidad, incertidumbre, esfuerzo y productividad por lo que aportan un cierto grado de anticipación de imprevistos.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Cada Sprint debe contar con un objetivo que dé coherencia al trabajo realizado durante el mismo.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El Equipo de Desarrollo elabora un plan el Sprint que consiste en dividir cada elemento en tareas técnicas de forma que se favorezca el trabajo en paralelo.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Las historias de usuario se refieren al Equipo Scrum y al cliente, las tareas técnicas son cosa del Equipo de Desarrollo.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El equipo puede reordenar las tareas localizando dependencias y puede asignar tareas a miembros concretos del Equipo de Desarrollo para optimizar el proceso. Se debe ser cuidadoso para evitar la generación de islas de conocimiento.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Durante el Sprint el Equipo puede decidir añadir tareas al Sprint Backlog, refinar las existentes o replantear su orden.\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"links-container\">\r\n    <div class=\"left-side-link-container\">\r\n        <a href=\"[[ROUTE:scrum-framework-eleven-]]\" class=\"post-content-link\">< Artefactos de Scrum. Gráfico Release Burndown</a>\r\n    </div\r\n    ><div class=\"right-side-link-container\">\r\n        <a href=\"[[ROUTE:scrum-framework-thirteen-]]\" class=\"post-content-link\">Artefactos de Scrum. Gráfico Sprint Burndown ></a>\r\n    </div>\r\n</div>\r\n<br>'
                WHERE (`post_content_id`=@previousPostId);");

        $this->addSql("UPDATE `links` SET `home`='1' WHERE (`link_id`=@thisPostLinkId);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '1', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '3', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '4', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '5', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '6', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '7', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '8', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '9', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '10', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '11', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '12', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '13', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '14', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '15', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '16', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '17', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES (@postId, '18', @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('1', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('3', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('4', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('5', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('6', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('7', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('8', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('9', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('10', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('11', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('12', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('13', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('15', @thisPostLinkId, @postDate);");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('16', @thisPostLinkId, @postDate);");
    }

    /**
     * @param Schema $schema
     */
    public function down(Schema $schema) {
        // this down() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql", "Migration can only be executed safely on \"mysql\".");
    }

}
