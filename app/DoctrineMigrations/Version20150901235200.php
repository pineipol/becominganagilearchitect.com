<?php

namespace Application\Migrations;

use Doctrine\DBAL\Migrations\AbstractMigration;
use Doctrine\DBAL\Schema\Schema;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
class Version20150901235200 extends AbstractMigration {

    /**
     * @param Schema $schema
     */
    public function up(Schema $schema) {
        // this up() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql", "Migration can only be executed safely on \"mysql\".");
        $this->addSql("UPDATE `posts` SET `show`='1', `created`='2015-09-02 23:52:00' WHERE (`post_id`='14');");
        $this->addSql("UPDATE `post_contents` SET `content`='<p>\r\n    <span style=\"font-size: 60px\">E</span>l <span style=\"font-weight:bold\">Product Backlog es un listado priorizado de todo aquello que podría ser necesario</span> realizar para completar el proyecto. La palabra podría refleja la verdadera esencia del Product Backlog, pues <span style=\"font-weight:bold\">es un elemento vivo y en constante evolución</span> y lo que hoy puede constituir el elemento más importante a desarrollar para el proyecto podría ser eliminado mañana si resultara necesario.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        El Product Backlog es un listado priorizado de todo lo que podría ser necesario a lo largo del proyecto que se mantiene vivo y en constante evolución.\r\n    </div>\r\n</div>\r\n<p>\r\n    <span style=\"font-weight:bold\">Su propietario y único responsable es el Product Owner</span>. A él corresponde su generación y es habitual que elaborare una primera versión durante lo que se conoce como Sprint 0 (Sprint Cero), el primer Sprint del proyecto y cuyo objetivo consiste en disponer todo aquello que sea necesario para que el equipo de desarrollo pueda iniciar su trabajo.\r\n</p>\r\n<p>\r\n    El Sprint 0 no es un sprint ordinario por lo que no cuenta con el resto de eventos habituales de un Sprint y carece también de una duración determinada. Podríamos decir que el Sprint 0 es todo el período de tiempo que transcurre desde la idea inicial del proyecto hasta que éste es definido por completo, son cerrados el contrato y el resto de condiciones con el cliente y se acaban de concretar todos los preparativos para que el equipo de desarrollo esté listo para llevar a cabo su primer Sprint.\r\n</p>\r\n<p>\r\n    <span style=\"font-weight:bold\">Es muy importante que sea el primer elemento del proyecto en ser generado</span>, antes de definir la tecnología que se empleará para el desarrollo del mismo, la arquitectura a emplear o, incluso, la contratación del equipo si fuera necesario contratar. La propia contratación de un arquitecto podría ser uno de los primeros ítems del Backlog, el cual llevaría a cabo la tarea de decidir la arquitectura, que sería un elemento del Backlog de menor prioridad que el de la contratación.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        La pronta definición del <span style=\"font-weight:bold\">Product Backlog será la pieza clave que permita generar un pronóstico de la planificación de todo el proyecto de forma empírica</span>, es decir, basado en medidas reales en lugar de especulaciones.\r\n    </div>\r\n</div>\r\n<p>\r\n    El Product Backlog <span style=\"font-weight:bold\">se mantendrá vivo mientras exista el proyecto</span>, ya sea para definir sus nuevas funcionalidades a desarrollar o los evolutivos y correcciones durante la fase de mantenimiento. <span style=\"font-weight:bold\">El Product Backlog nunca estará completo</span> y su primera versión tan sólo pondrá de manifiesto los requisitos inicialmente conocidos y mejor entendidos.\r\n</p>\r\n<p>\r\n    El Product Backlog <span style=\"font-weight:bold\">debe ser la única fuente de requisitos del proyecto</span> y debe recoger las referencias a cualquier otro tipo de herramientas que se utilicen para definir las tareas como, por ejemplo, enlaces o referencias a herramientas de diseño y modelado con las que se hayan desarrollado los diseños o wireframes necesarios para que el Equipo de Desarrollo sepa cómo realizar sus tareas.\r\n</p>\r\n<p>\r\n    Como ya explicado en la sección de <a href=\"[[ROUTE:scrum-framework-eight-]]\" class=\"post-content-link\">las reuniones de grooming</a>, el Product Backlog es dinámico, es decir, <span style=\"font-weight:bold\">permanece en constante evolución a lo largo de todo el proyecto</span> para poner de manifiesto aquellas necesidades que lo sitúen como atractivo y superior frente a productos de la competencia.\r\n</p>\r\n<div class=\"green_text_box\">\r\n    <div class=\"generic_icon\"></div\r\n    ><div class=\"generic_text_container\">\r\n        Sus <span style=\"font-weight:bold\">elementos cuentan con atributos de descripción, prioridad, estimación y valor</span> y distintos equipos de Scrum que trabajen en el mismo proyecto podrían y, de hecho deberían, compartir el mismo Product Backlog e, incluso, el mismo Product Owner.\r\n    </div>\r\n</div>\r\n<p>\r\n    Los <span style=\"font-weight:bold\">elementos del Product Backlog de mayor prioridad suelen ser más claros y estar definidos a un mayor nivel de detalle</span>, es decir, suelen ser elementos con un menor grado de incertidumbre o representar incertidumbres acotadas. Por ejemplo, un elemento de alta prioridad del Backlog podría consistir en aprender a empaquetar una aplicación Web para Android mediante el framework Apache Cordova, mientras que uno de baja podría ser, simplemente, que el proyecto cuente con aplicaciones mobile.\r\n</p>\r\n<div class=\"key_points_text_box\">\r\n    <div class=\"title_box\">\r\n        <div class=\"generic_icon_container\"></div>\r\n        <div class=\"generic_title_container\">Key Points</div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Es un listado priorizado de todo lo que podría ser necesario completar durante el proyecto.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Permanece en constante evolución a lo largo de todo el proyecto.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                El Product Owner es su propietario y único responsable.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Su primera versión se elabora durante el Sprint Cero.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Debe ser el primer elemento del proyecto en ser generado.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Tan pronto como sea definido se podrá generar un pronóstico de la planificación de todo el proyecto de forma empírica.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Es la única fuente de requisitos del proyecto.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Sus elementos cuentan con atributos de descripción, prioridad, estimación y valor.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Distintos equipos Scrum que trabajen en el mismo proyecto deberían compartir el mismo Product Backlog y el mismo Product Owner.\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content_container\">\r\n        <div class=\"row_container\">\r\n            <div class=\"bullet\"></div>\r\n            <div class=\"text\">\r\n                Sus elementos de mayor prioridad suelen ser más claros y estar definidos a un mayor nivel de detalle.\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"links-container\">\r\n    <div class=\"left-side-link-container\">\r\n        <a href=\"[[ROUTE:scrum-framework-eight-]]\" class=\"post-content-link\">< Eventos de Scrum. Reuniones de Grooming o refinamiento del Backlog</a>\r\n    </div\r\n    ><div class=\"right-side-link-container\">\r\n        <a href=\"[[ROUTE:scrum-framework-ten-]]\" class=\"post-content-link\">Artefactos de Scrum. Historias de Usuario en el Product Backlog ></a>\r\n    </div>\r\n</div>\r\n<br>' WHERE (`post_content_id`='13');");
        $this->addSql("UPDATE `post_contents` SET `description`='<p>\r\n    Ela sección de introducción hemos hablado sobre cómo Scrum está basado en el empirismo y sobre cómo la velocidad de trabajo de los Equipos de Desarrollo dota al proceso de Scrum de predictibilidad. Los elementos del Product Backlog cuentan con una propiedad imprescindible para conseguir este objetivo, las estimaciones.\r\n</p>\r\n<p>\r\n    El Product Backlog debe contener todo aquello que	sea necesario realizar para completar el proyecto...\r\n</p>' WHERE (`post_content_id`='14');");
        $this->addSql("UPDATE `post_contents` SET `image`='uploads/posts/150902_user_stories/user_stories.jpg' WHERE (`post_content_id`='14');");
        $this->addSql("UPDATE `links` SET `home`='1' WHERE (`link_id`='16');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '1', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '3', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '4', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '5', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '6', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '7', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '8', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '9', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '10', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '11', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '12', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '13', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '14', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('14', '15', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('1', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('3', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('4', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('5', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('6', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('7', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('8', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('9', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('10', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('11', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('12', '16', '2015-09-02 23:52:00');");
        $this->addSql("INSERT INTO `posts_links` (`post_id`, `link_id`, `created`) VALUES ('13', '16', '2015-09-02 23:52:00');");
    }

    /**
     * @param Schema $schema
     */
    public function down(Schema $schema) {
        // this down() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql", "Migration can only be executed safely on \"mysql\".");
    }

}
